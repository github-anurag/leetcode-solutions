class Node{
    char val;
    Node next;

    public Node(char c){
        val = c;
        next = null;
    }
}
class Solution{
    public static Node buildList(char[] ch){
        Node n = new Node('0');
        Node head = n;
        for(char c :ch){
            Node temp = new Node(c);
            n.next = temp;
            n = n.next;
        }
        return head.next;
    }

    public static void printList(Node root){
        Node curr = root;
        while(curr != null){
            System.out.print(curr.val + "->");
            curr = curr.next;
        }
        System.out.print("X");
        System.out.println();
    }

    public static Node matchDelete(Node head, char[] p){
        if(head == null)
            return null;
        //Keep a dummy node for newly generated list
        Node dummy = new Node('0');
        Node r = dummy;

        //Put start and end as head
        Node start = head;
        Node end = head;

        //Loop while end is not null
        while(end != null){
            //pattern match start
            if(end.val == p[0]){
                int i = 0;
                while(i < p.length && end != null && end.val == p[i]){
                    ++i;
                    end = end.next;
                }
                //If the pattern is exact match
                if(i == p.length){
                    //Is pattern at end of list, if so mark r next as null and return
                    if(end == null){
                        r.next = null;
                        return dummy.next;
                    }else{
                        //skip all elements till end
                        start = end;
                    }
                }else{
                    //pattern matched partially, always put first start in list and skip still start matches end or matches p[0]
                    while( start != null && start != end) {
                        r.next = start;
                        start = start.next;
                        r = r.next;
                        if(start != null && start.val == p[0]){
                            end = start;
                            break;
                        }
                    }
                }
            }else{
                //no match copy to r list
                r.next = start;
                start = start.next;
                end = end.next;
                r = r.next;
            }
        }
        r.next = null;
        return dummy.next;
    }

}
public class MatchAndDelete {
    public static void main(String args[]) {
        char[] list = "111111111".toCharArray();
        char[] pattern = "111111111".toCharArray();
        System.out.println("List:-");
        Node head = Solution.buildList(list);
        Solution.printList(head);
        System.out.println("Result:");
        Node result = Solution.matchDelete(head,pattern);
        Solution.printList(result);
    }
}
